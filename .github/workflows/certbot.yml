name: Certs Generation
run-name: Certs Generation

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment Environment"
        required: true
        default: "qa"
        type: choice
        options:
          - qa
          - magnum

jobs:
  generate-certificate:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-1
        
    - name: Install Certbot
      run: |
        sudo apt-get update
        sudo apt-get install -y certbot python3-certbot-dns-route53
        
    - name: Generate SSL Certificate
      continue-on-error: true
      run: |
        certbot certonly \
          --dns-route53 \
          --agree-tos \
          --non-interactive \
          --dns-route53-propagation-seconds 60 \
          -d ${{ secrets.DOMAIN_NAME }}.wondermove.in \
          -d auth.${{ secrets.DOMAIN_NAME }}.wondermove.in \
          --email thinker@wonderwhy.in \
          --config-dir ./ \
          --work-dir ./ \
          --logs-dir /tmp

    - name: Get Runner IP
      run: |
        IP_ADDRESS=$(curl -s https://api.ipify.org)
        echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV


    - name: Set Variables
      run: echo "ELASTIC_IP=${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }}" >> $GITHUB_ENV


    - name: Update Security Group
      run: |
        SECURITY_GROUP_ID="${{ secrets.SECURITY_GROUP_ID }}"
        IP_ADDRESS=${{ env.IP_ADDRESS }}
        aws ec2 authorize-security-group-ingress \
          --group-id $SECURITY_GROUP_ID \
          --protocol tcp \
          --port 22 \
          --cidr ${IP_ADDRESS}/32
          
    - name: Setup SSH Key
      env:
        SSH_PRIVATE_KEY_FOR_EC2: ${{ secrets.SSH_PRIVATE_KEY_FOR_EC2 }}
      run: |
        echo "$SSH_PRIVATE_KEY_FOR_EC2" > SSH_PRIVATE_KEY_FOR_EC2.pem
        chmod 600 SSH_PRIVATE_KEY_FOR_EC2.pem

    - name: Add remote host to known_hosts # Add this to Startup Scripts on Terraform
      run: |
        ls
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts


        
    - name: Clone Secrets to EC2
      run: |
        rsync -avzL  -e 'ssh -i SSH_PRIVATE_KEY_FOR_EC2.pem -o StrictHostKeyChecking=no' /home/runner/work/pipelines/pipelines/live/${{ secrets.DOMAIN_NAME }}.wondermove.in/fullchain.pem  ${{ env.ELASTIC_IP }}:~/nginx/certs
        rsync -avzL  -e 'ssh -i SSH_PRIVATE_KEY_FOR_EC2.pem -o StrictHostKeyChecking=no' /home/runner/work/pipelines/pipelines/live/${{ secrets.DOMAIN_NAME }}.wondermove.in/privkey.pem  ${{ env.ELASTIC_IP }}:~/nginx/certs


    - name: Remove Added Security Group Rule
      run: |
        SECURITY_GROUP_ID="${{ secrets.SECURITY_GROUP_ID }}"
        aws ec2 revoke-security-group-ingress \
          --group-id $SECURITY_GROUP_ID \
          --protocol tcp \
          --port 22 \
          --cidr ${IP_ADDRESS}/32
